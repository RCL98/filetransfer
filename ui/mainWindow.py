# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import json
from typing import Set, Any

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import Qt, QAbstractItemModel, QModelIndex
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import QHeaderView, QSizePolicy
from os.path import splitext

selected: Set[Any] = set()


class FileItem:
    def __init__(self, filename, timestamp, size, parent=None):
        self.parentItem = parent
        file_dict = splitext(filename)
        self.itemData = [file_dict[0], file_dict[-1], size, 1]
        self.checkedState = False

    @staticmethod
    def childCount():
        return 0

    @staticmethod
    def columnCount():
        return 4

    def data(self, column):
        return self.itemData[column]

    def parent(self):
        return self.parentItem

    def row(self):
        return self.parentItem.childItems.index(self)

    def setCheckedState(self, value):
        if value == 2:
            self.checkedState = True
            selected.add('/'.join(self.parentItem.path) +
                         '/' + self.itemData[0])
        else:
            self.checkedState = False
            selected.discard('/'.join(self.parentItem.path) +
                             '/' + self.itemData[0])
        #print(selected)
        return '/'.join(self.parentItem.path) + '/' + self.itemData[0]

    def getCheckedState(self):
        if self.checkedState:
            return Qt.Checked
        else:
            return Qt.Unchecked


class FolderItem:
    def __init__(self, path=None, parent=None, treeInput=None):
        if path is None:
            path = []
        self.treeInput = treeInput
        self.parentItem = parent
        self.path = path
        self.size = 0
        self.type = 'File folder'
        self.nrFiles = 0
        self.checkedState = False
        self.childItems = []

        if self.path:
            folder_content = self.get_dict_from_path()
            if folder_content.get('files', False):
                self.n_children = len(
                    folder_content['files']) + len(folder_content) - 3
            else:
                self.n_children = len(folder_content)
                self.n_children = self.n_children - 2 if folder_content.get('files', False) == False else self.n_children - 3
            self.size = folder_content['size']
            self.nrFiles = folder_content['nrFiles']
        else:
            with open(self.treeInput, "r") as jFile:  # TODO: handle files at root level
                self.n_children = len(json.load(jFile))

        self.is_loaded = False

    def get_dict_from_path(self):
        with open(self.treeInput, "r") as jFile:
            current_level = json.load(jFile)
            for folder in self.path:
                current_level = current_level[folder]
            return current_level

    def load_children(self):
        self.childItems = []
        if self.path:
            child_dirs = []
            folder_content = self.get_dict_from_path()
            for folder in folder_content.keys():
                if folder == 'files':
                    for file in folder_content['files']:
                        fileItem = FileItem(
                            file['filename'], 'timp', file['size'], parent=self)
                        if self.getCheckedState() == Qt.Checked:
                            fileItem.setCheckedState(2)
                        self.childItems.append(fileItem)
                elif folder != 'size' and folder != 'nrFiles':
                    child_dirs.append(folder)
        else:  # special case of root node. TODO: handle files at root level
            with open(self.treeInput, "r") as jFile:
                child_dirs = json.load(jFile).keys()

        for child_dir in child_dirs:
            child_path = self.path + [child_dir]
            folderItem = FolderItem(
                path=child_path, parent=self, treeInput=self.treeInput)
            if self.getCheckedState() == Qt.Checked:
                folderItem.setCheckedState(2)
            self.childItems.append(folderItem)
        self.is_loaded = True

    def child(self, row):
        return self.childItems[row]

    def childCount(self):
        return self.n_children

    @staticmethod
    def columnCount():
        return 4

    def setCheckedState(self, value):
        if value == 2:
            self.checkedState = True
            selected.add('/'.join(self.path))
        else:
            self.checkedState = False
            selected.discard('/'.join(self.path))
        for child in self.childItems:
            child.setCheckedState(value)
        return '/'.join(self.path)

    def getCheckedState(self):
        if self.checkedState:
            return Qt.Checked
        else:
            return Qt.Unchecked

    def data(self, column):
        if column == 0 and self.path:
            return self.path[-1]
        elif column == 1:
            return self.type
        elif column == 2:
            return self.size
        elif column == 3:
            return self.nrFiles
        else:
            return None

    def parent(self):
        return self.parentItem

    def row(self):
        if self.parentItem:
            return self.parentItem.childItems.index(self)
        return 0


class TreeModel(QAbstractItemModel):
    column_names = ['Name', 'File type',  'Size', 'Nr of file']

    def __init__(self, parent=None, treeInput=None):
        super(TreeModel, self).__init__(parent)
        assert treeInput is not None, 'treeInput must be a valid file!'

        self.treeDict = {}
        self.treeInput = treeInput
        self.load_treeDict()
        self.rootItem = FolderItem(path=[], treeInput=treeInput)
        self.rootItem.load_children()
        self.selectedItems = set()

    def load_treeDict(self):
        with open(self.treeInput, "r") as jsonFile:
            self.treeDict = json.load(jsonFile)

    def columnCount(self, parent):
        return 4

    def data(self, index, role):
        if not index.isValid():
            return None

        item = index.internalPointer()

        if role == Qt.DisplayRole:
            return item.data(index.column())
        elif role == Qt.CheckStateRole and index.column() == 0:
            return item.getCheckedState()
        else:
            return None

    def setData(self, index, value, role=Qt.EditRole):
        if role == Qt.CheckStateRole:
            item = index.internalPointer()
            selectItem = item.setCheckedState(value)
            if value == 2:
                self.selectedItems.add(selectItem)
            else:
                self.selectedItems.discard(selectItem)
            print(self.selectedItems)
            self.dataChanged.emit(QtCore.QModelIndex(), QtCore.QModelIndex())

        return True

    def canFetchMore(self, index):
        if not index.isValid():
            return False
        item = index.internalPointer()
        return not item.is_loaded

    def fetchMore(self, index):
        item = index.internalPointer()
        item.load_children()

    def flags(self, index):
        if not index.isValid():
            return Qt.NoItemFlags

        return Qt.ItemIsEnabled | Qt.ItemIsUserCheckable

    def headerData(self, section, orientation, role):
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            return self.column_names[section]

        return None

    def index(self, row, column, parent):
        if not self.hasIndex(row, column, parent):
            return QModelIndex()

        if not parent.isValid():
            parentItem = self.rootItem
        else:
            parentItem = parent.internalPointer()

        childItem = parentItem.child(row)
        if childItem:
            return self.createIndex(row, column, childItem)
        else:
            return QModelIndex()

    def parent(self, index):
        if not index.isValid():
            return QModelIndex()

        childItem = index.internalPointer()
        parentItem = childItem.parent()

        if parentItem == self.rootItem:
            return QModelIndex()

        return self.createIndex(parentItem.row(), 0, parentItem)

    def rowCount(self, parent):
        if parent.column() > 0:
            return 0

        if not parent.isValid():
            parentItem = self.rootItem
        else:
            parentItem = parent.internalPointer()

        return parentItem.childCount()


# class StandardItemModel(QtGui.QStandardItemModel):
#     ExpandableRole = QtCore.Qt.UserRole + 500
#
#     def hasChildren(self, index):
#         if self.data(index, StandardItemModel.ExpandableRole):
#             return True
#         return super(StandardItemModel, self).hasChildren(index)

class UserItem(QStandardItem):
    _StructFileRole = QtCore.Qt.UserRole + 5

    def __init__(self, parent=None, name=None, structFile=None):
        super(UserItem, self).__init__(parent)
        self.setData(structFile, UserItem._StructFileRole)
        self.setText(name)


class Ui_MainWindow(QtWidgets.QWidget):
    def __init__(self, mainWindow):
        super(Ui_MainWindow, self).__init__()

        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame)
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)

        self.usersView = QtWidgets.QListView(self.frame_2)
        self.gridLayout = QtWidgets.QGridLayout(self.frame_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)

        self.treeModel = None
        self.usersModel = None
        self.treeView = QtWidgets.QTreeView(self.frame)
        self.header = self.treeView.header()
        self.setupUi(mainWindow)

    def usersList(self, users_input):
        self.usersModel = QStandardItemModel()
        with open(users_input, "r") as inp:
            for line in inp.readlines():
                item = UserItem(name=line.strip(),
                                structFile='../files/tree_list_1.txt')
                self.usersModel.appendRow(item)
        self.usersView.setModel(self.usersModel)
        self.gridLayout.addWidget(self.usersView, 1, 0, 1, 1)

    def fileStructTree(self, index):
        self.treeModel = TreeModel(treeInput=self.usersView.model().itemData(index)[
                                   UserItem._StructFileRole])
        # Allows for scrolling optimizations.
        self.treeView.setAlternatingRowColors(True)
        self.treeView.setUniformRowHeights(True)
        self.treeView.setModel(self.treeModel)
        self.header.setStretchLastSection(False)
        self.header.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        self.header.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        self.header.setSectionResizeMode(0, QHeaderView.Stretch)

    def setupUi(self, mainWind):
        mainWind.setObjectName("mainWindow")
        mainWind.resize(853, 672)

        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.gridLayout.setObjectName("gridLayout")

        self.usersView.setObjectName("usersListView")
        self.usersList("../files/users_list.txt")
        self.treeView.setObjectName("filesTreeView")
        self.gridLayout_2.addWidget(self.treeView, 0, 0, 1, 1)

        self.horizontalLayout.addWidget(self.frame_2)
        spacerItem = QtWidgets.QSpacerItem(
            20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout.addItem(spacerItem)

        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.gridLayout_2.setObjectName("gridLayout_2")

        self.horizontalLayout.addWidget(self.frame)
        self.horizontalLayout.setStretch(0, 15)
        self.horizontalLayout.setStretch(1, 1)
        self.horizontalLayout.setStretch(2, 25)
        self.gridLayout_3.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        mainWind.setCentralWidget(self.centralwidget)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 853, 26))
        self.menubar.setObjectName("menubar")
        mainWind.setMenuBar(self.menubar)
        self.statusbar.setObjectName("statusbar")
        mainWind.setStatusBar(self.statusbar)

        self.retranslateUi(mainWind)
        self.usersView.clicked['QModelIndex'].connect(self.fileStructTree)
        # lambda file="tree_list_1.txt": self.fileStructTree(file))
        # self.treeView.clicked.connect(self.update_model)
        QtCore.QMetaObject.connectSlotsByName(mainWind)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "FileTransfer"))

        # __sortingEnabled = self.usersWidget .isSortingEnabled()
        # self.usersView.setSortingEnabled(False)
        # self.usersView.setSortingEnabled(__sortingEnabled)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(mainWindow)
    # ui.setupUi(mainWindow)
    try:
        mainWindow.show()
        sys.exit(app.exec_())
    except Exception as e:
        print(e)

# def fileStructure(self, tree_input):
#     self.fileDict = {}
#     with open(tree_input, "r") as inp:
#         self.roots = inp.readline().strip().split()
#         for line in inp.readlines():
#             files = line.strip().split("/")
#             self.fileDict[files[0]] = []
#             for file in files[1:]:
#                 self.fileDict[files[0]].append(file)
#     self.init_model()

# def init_model(self):
#     self.treeModel.clear()
#     self.treeModel.setHorizontalHeaderLabels(
#         ['Files', 'Size', 'Nr. files'])
#     for key in self.roots:
#         parent_item = QtGui.QStandardItem(key)
#         parent_item.setData(True, StandardItemModel.ExpandableRole)
#         parent_item.setData("this is a parent", QtCore.Qt.ToolTipRole)
#         self.treeModel.appendRow(parent_item)

# def update_model(self, index):
#     parent_item = self.treeModel.itemFromIndex(index)
#     t = parent_item.rowCount()
#     if not parent_item.rowCount():
#         for child in self.fileDict[parent_item.text()]:
#             child_item = QtGui.QStandardItem(child)
#             child_item.setData("this is a child", QtCore.Qt.ToolTipRole)
#             parent_item.appendRow(child_item)
